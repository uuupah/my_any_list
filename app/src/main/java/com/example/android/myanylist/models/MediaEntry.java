package com.example.android.myanylist.models;

import android.os.Parcel;
import android.os.Parcelable;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;

import com.example.android.myanylist.R;
import com.example.android.myanylist.util.Utility;

@Entity(tableName = "entries")
public class MediaEntry implements Parcelable {
    private static final String TAG = "MediaEntry";

    // vars
    @PrimaryKey(autoGenerate = true)        private int id;
    @NonNull @ColumnInfo(name = "title")    private String title;           // the title of the piece of media
    @ColumnInfo(name = "score")             private int score;              // the score out of ten (shown as half stars out of five)
    @ColumnInfo(name = "timestamp")         private String timeStamp;       // the date the piece of media was added to the database (autogenerated)
    @ColumnInfo(name = "date_created")      private String dateCreated;     // the date the piece of media was created by its creator
    @NonNull @ColumnInfo(name = "status")   private int status;             // the status of consumption (planning, watching, completed etc
    @ColumnInfo(name = "creator")           private String creator;         // the name of the creator
    @ColumnInfo(name = "description")       private String description;     // description of the piece of media
    @ColumnInfo(name = "image")             private int image;              // resource id of splash image depicting the piece of media;
    @ColumnInfo(name = "image_location")    private String imageLocation;   // filesystem location of splash image

    // standard constructor
    public MediaEntry(String title, int score, String dateCreated, int status, String creator, String description, int image) {
        this.title = title;
        this.score = score;
        this.timeStamp = Utility.getCurrentTimestamp();
        this.dateCreated = dateCreated;
        this.status = status;
        this.creator = creator;
        this.description = description;
        this.image = image;
    }

    // empty constructor
    @Ignore
    public MediaEntry(){
        this.title = "title";
        this.score = 0;
        this.timeStamp = Utility.getCurrentTimestamp();
        this.dateCreated = "01011970";
        this.status = 0;
        this.creator = "creator";
        this.description = "description";
        this.image = R.drawable.dark_souls;
    };

    protected MediaEntry(Parcel in) {
        id = in.readInt();
        title = in.readString();
        score = in.readInt();
        timeStamp = in.readString();
        dateCreated = in.readString();
        status = in.readInt();
        creator = in.readString();
        description = in.readString();
        image = in.readInt();
    }

    public static final Creator<MediaEntry> CREATOR = new Creator<MediaEntry>() {
        @Override
        public MediaEntry createFromParcel(Parcel in) {
            return new MediaEntry(in);
        }

        @Override
        public MediaEntry[] newArray(int size) {
            return new MediaEntry[size];
        }
    };

    // tostring method
    @Override
    public String toString() {
        return "MediaEntry{" +
                "id=" + id +
                ", title='" + title + '\'' +
                ", score=" + score +
                ", timeStamp='" + timeStamp + '\'' +
                ", dateCreated='" + dateCreated + '\'' +
                ", status='" + status + '\'' +
                ", creator='" + creator + '\'' +
                ", description='" + description + '\'' +
                ", image=" + image +
                '}';
    }

    // getter methods
    public int getId() {return id;}
    public String getTitle() {return title;}
    public int getScore() {return score;}
    public String getTimeStamp() {return timeStamp;}
    public String getDateCreated() {return dateCreated;}
    public int getStatus() {return status;}
    public String getCreator() {return creator;}
    public String getDescription() {return description;}
    public int getImage() {return image;}
    public String getImageLocation() {return imageLocation;}

    // setter methods
    public void setId(int id) {this.id = id;}
    public void setTitle(String title) {this.title = title;}
    public void setScore(int score) {this.score = score;}
    public void setTimeStamp(String timeStamp) {this.timeStamp = timeStamp;}            // should probably not exist
    public void setDateCreated(String dateCreated) {this.dateCreated = dateCreated;}
    public void setStatus(int status) {this.status = status;}
    public void setCreator(String creator) {this.creator = creator;}
    public void setDescription(String description) {this.description = description;}
    public void setImage(int image) {this.image = image;}
    public void setImageLocation (String imageLocation) {this.imageLocation = imageLocation;}

    // status types
    public final static int STATUS_PLANNING = 0;
    public final static int STATUS_IN_PROGRESS = 1;
    public final static int STATUS_COMPLETED = 2;
    public final static int STATUS_DROPPED = 3;

    public static String getStringStatus (int i) {
        switch (i) {
            case STATUS_PLANNING:
                return "Planning";
            case STATUS_IN_PROGRESS:
                return "In Progress";
            case STATUS_COMPLETED:
                return "Completed";
            case STATUS_DROPPED:
                return "Dropped";
            default:
                Log.e(TAG, "getStringStatus: invalid status");
                return "Invalid status";
        }
    }

    public static int getStatusColor (int i) {
        switch (i) {
            case STATUS_PLANNING:
                return R.color.status_planning_yellow;
            case STATUS_IN_PROGRESS:
                return R.color.status_in_progress_blue;
            case STATUS_COMPLETED:
                return R.color.status_completed_green;
            case STATUS_DROPPED:
                return R.color.status_dropped_red;
            default:
                Log.e(TAG, "getStatusColor: invalid status");
                return R.color.textGrey;
        }
    }


    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeInt(id);
        dest.writeString(title);
        dest.writeInt(score);
        dest.writeString(timeStamp);
        dest.writeString(dateCreated);
        dest.writeInt(status);
        dest.writeString(creator);
        dest.writeString(description);
        dest.writeInt(image);
        dest.writeString(imageLocation);
    }
}
